//Chris Gell December 2019 v3b
//Code to image arbitrary sized and oritented microarrays, using a 2-point position calibration.
//All the code is setting out to do is to create a position list. All other
//aspects of imaging, for now, are handled in the standard MM interface.

//currently set up for the TL and TR for oritentation. it is assumed these are set as the 
//first and second positions in the gui position list.

//idea is to set up a minimal script and then test.  


import ij.gui.GenericDialog;
import java.lang.System;
import org.micromanager.api.PositionList; 
import org.micromanager.api.MultiStagePosition; 
import org.micromanager.api.StagePosition; 
import org.micromanager.api.PositionListDlg;	


//////////////////////////////////////////////////////////////////
//Should eventially have the flexability to cope with different arrays
//for now the behaviour is coded manually into different scripts.
///////////////////////////////////////////////////////////////////// 
//EDIT THESE BASED ON ARRAY SIZE AND GEOMETERY
nrGridPoints = 3;//the 'side', i.e. a topo is 66, not 66x66
distance = 3500;  //assume this is in microns??

//For the below to work will have to have adidtioanl calib points.
//numArrays=3;// not functional - will need to cope with 3 per slide
//offSet=0;	// will alos need to cope with offset arrays
//offSetnrGridPoints=; //these offset arrays will have different sizes
////////////////////////////////////////////////////////////////


//read in the current positon list, this will contain BL and TR coords
//from which to calculate the angles.
PositionList plOrg = gui.getPositionList(); //get current PossitionList 


//Would be best now to convert the below to a function

//should add in some error checks here.
BLxPosc=plOrg.getPosition(0).x;
BLyPosc=plOrg.getPosition(0).y;
BRxPosc=plOrg.getPosition(1).x;
BRyPosc=plOrg.getPosition(1).y;


print("BL "+TLxPosc+","+BLyPosc);
print("BR "+TRxPosc+","+BRyPosc);

float BLxPos=BLxPosc;
float BLyPos=BLyPosc;
float BRxPos=BRxPosc;
float BRyPos=BRyPosc;


//empty the position list
plOrg.clearAllPositions();

//initialise this, will use this for error checks later
//clockW=-2;



//******************************
//will need to work out the rotation CW or CCW and the angle from here, then set up conditonal calculations below.
//set this flag to 0 if motion is counter clock wise, 1 if it's clockwise
if (BRyPos-BLyPos > 0) { //CCW
	clockW=0;
	print("CCW");
} else {
	clockW=1; //CW
	print("CW");
}


//Calculate the angle of rotation
float angleBRBL=0.0;
float angleBRBL=Math.atan((BRyPos-BLyPos)/(BLxPos-BRxPos));

//counter clockiwise rotation 
if (clockW==0) { 
			for (int i =0; i < nrGridPoints; i++) {
			for (int j=0; j < nrGridPoints; j++) {
				MultiStagePosition msp = new MultiStagePosition();
				StagePosition s = new StagePosition();
				s.stageName = "XYStage";
				s.numAxes = 2;

				s.x = (j * distance);
				s.y = (i * distance);
		
		


				//will need to compute the rotation correction factors here here
				corrX = s.x*Math.cos(angleBRBL) - s.y*Math.sin(angleBRBL);
				corrY = s.x*Math.sin(angleBRBL) + s.y*Math.cos(angleBRBL);
				s.x=BLxPos-corrX;
				s.y=BLyPos+corrY;

				
				msp.add(s);
				msp.setLabel("Pos-" + i + "-" + j);
				plOrg.addPosition(msp);
			}
	}
//clockwise rotation
} else { 

}

mm.setPositionList(plOrg);